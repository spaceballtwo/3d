// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile3 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level3":
            case "level3":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . 2 2 2 2 2 2 2 2 2 2 
. . . . . 2 . . . . . . . . . . 
. . . . 2 . . . . . . . . . . . 
. . . 2 . . . . . . . . . . . . 
. . 2 . . . . . . . . . . . . . 
. . 2 . . . . . 2 2 2 2 2 2 2 2 
. . 2 . . . . 2 . . . . . . . . 
. . 2 . . . . 2 2 . . . . . . . 
. . . 2 . . . . 2 2 . . . . . . 
. . . 2 . . . . . . 2 . . . . . 
. . . 2 . . . . . . 2 . . . . . 
. . . 2 . . . . . . 2 . . . . . 
. . . 2 . . . . . . 2 . . . . . 
. . . 2 . . . . . . 2 . . . . . 
. . . 2 . . . . . . 2 . . . . . 
`, [myTiles.transparency16,myTiles.tile1], TileScale.Sixteen);
            case "level4":
            case "level4":return tiles.createTilemap(hex`1000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex``, img`
. . . 2 2 2 . 2 2 2 2 2 2 2 2 . 
. 2 . . . . . . . . . . . . 2 . 
. 2 . 2 2 2 . 2 2 2 2 2 2 . 2 . 
. 2 . . . 2 . 2 . . . . 2 . . . 
2 2 2 2 . 2 . 2 2 2 2 . 2 . 2 . 
. . . . . 2 . . . . . . 2 . 2 . 
. 2 2 2 2 2 2 2 2 2 2 2 2 . 2 . 
. 2 . 2 . . . 2 . . . . 2 . 2 . 
. 2 . 2 . 2 . 2 . 2 2 . 2 . 2 2 
. 2 . 2 . 2 . 2 . . 2 . 2 . . . 
. 2 . 2 . 2 . 2 . . 2 . 2 . 2 2 
. . . . . 2 . 2 2 2 2 . 2 . . . 
2 2 2 2 . 2 . 2 . . . . 2 . 2 . 
. . . . . 2 . 2 2 2 2 . . . 2 . 
2 2 2 2 2 2 . 2 . . 2 2 2 2 2 . 
. . . . . . . 2 . . . . . . . . 
`, [myTiles.transparency16,myTiles.tile1,myTiles.tile2], TileScale.Sixteen);
            case "level1":
            case "level1":return tiles.createTilemap(hex``, img`
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
`, [myTiles.transparency16,myTiles.tile1,myTiles.tile3], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "myTile":
            case "tile1":return tile1;
            case "myTile0":
            case "tile2":return tile2;
            case "myTile1":
            case "tile3":return tile3;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
